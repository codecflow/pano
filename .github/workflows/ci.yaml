name: Build and release (linux, macos)

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    tags: ["v*.*.*"]
    branches: [main]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened, edited]
  workflow_dispatch:

jobs:
  lint_commit:
    name: Lint Commit Message
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
      - run: npm i -g @commitlint/cli @commitlint/config-conventional commitlint-plugin-regex-match
      - name: Lint message/title
        if: ${{ github.event_name == 'pull_request' || startsWith(github.ref, 'refs/heads/') }}
        run: |
          MSG=""
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            MSG="${{ github.event.pull_request.title }}"
          else
            MSG="${{ github.event.head_commit.message }}"
          fi
          echo "Linting: $MSG"
          echo "$MSG" | npx commitlint

  build-linux:
    name: Build (linux)
    needs: [lint_commit]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install system deps
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential pkg-config \
            libgtk-4-dev libwebkit2gtk-4.1-dev libsoup-3.0-dev

      - uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Detect arch
        run: echo "ARCH=$(uname -m)" >> "$GITHUB_ENV"

      - name: Build (release)
        run: cargo build --release --locked

      - name: Package
        run: |
          mkdir -p out
          cp target/release/pano out/pano
          strip out/pano || true
          TARBALL="pano-linux-${ARCH}.tar.gz"
          tar -czf "$TARBALL" -C out pano
          echo "TARBALL=$TARBALL" >> "$GITHUB_ENV"

      - uses: actions/upload-artifact@v4
        with:
          name: pano-linux-${{ env.ARCH }} # e.g. x86_64
          path: ${{ env.TARBALL }}

  build-macos:
    name: Build (macos)
    needs: [lint_commit]
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Build (release)
        run: cargo build --release --locked

      - name: Detect arch & package
        id: pkg
        run: |
          ARCH=$(uname -m)  # arm64 on Apple Silicon
          echo "ARCH=$ARCH" >> "$GITHUB_ENV"
          mkdir -p out
          cp target/release/pano out/pano
          chmod +x out/pano
          ZIP="pano-macos-${ARCH}.zip"
          /usr/bin/zip -r "$ZIP" out/pano
          echo "zip=$ZIP" >> "$GITHUB_OUTPUT"

      - uses: actions/upload-artifact@v4
        with:
          name: pano-macos-${{ env.ARCH }} # e.g. arm64
          path: ${{ steps.pkg.outputs.zip }}

  release:
    name: Create Release
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    needs: [lint_commit, build-linux, build-macos]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine next tag (semver from conventional commits)
        id: semver
        shell: bash
        run: |
          set -euo pipefail
          git fetch --tags --force
          last_tag="$(git tag -l 'v*.*.*' --sort=-v:refname | head -n1)"
          if [ -z "$last_tag" ]; then
            echo "new=v0.1.0" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          commits="$(git log --format=%B "${last_tag}"..HEAD)"
          bump=patch
          echo "$commits" | grep -E 'BREAKING CHANGE|!:' -q && bump=major || true
          if [ "$bump" = patch ]; then
            echo "$commits" | grep -E '^feat(\(|:)' -q && bump=minor || true
          fi
          ver="${last_tag#v}"; IFS=. read -r MAJOR MINOR PATCH <<<"$ver"
          case "$bump" in
            major) MAJOR=$((MAJOR+1)); MINOR=0; PATCH=0 ;;
            minor) MINOR=$((MINOR+1)); PATCH=0 ;;
            patch) PATCH=$((PATCH+1)) ;;
          esac
          echo "new=v${MAJOR}.${MINOR}.${PATCH}" >> "$GITHUB_OUTPUT"

      - uses: actions/download-artifact@v4
        with:
          pattern: pano-*
          path: artifacts
          merge-multiple: true

      - name: Generate checksums
        run: |
          cd artifacts
          rm -f checksums.txt
          for f in *.zip *.tar.gz; do [ -f "$f" ] && sha256sum "$f" >> checksums.txt; done
          cat checksums.txt

      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.semver.outputs.new }}
          target_commitish: ${{ github.sha }}
          files: |
            artifacts/*.zip
            artifacts/*.tar.gz
            artifacts/checksums.txt
          generate_release_notes: true
          make_latest: true
          draft: false
          prerelease: ${{ contains(github.ref_name, '-rc') || contains(github.ref_name, '-beta') || contains(github.ref_name, '-alpha') }}
