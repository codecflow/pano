name: Release Binaries

on:
  workflow_run:
    workflows: ["Build Images"]
    types:
      - completed
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write
  packages: read

jobs:
  extract-binaries:
    name: Extract Binaries from Docker Images
    runs-on: ubuntu-latest
    if: ${{ (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) || (github.event.workflow_run.conclusion == 'success' && startsWith(github.event.workflow_run.head_branch, 'v')) }}
    strategy:
      matrix:
        include:
          - variant: musl
            arch: amd64
            platform: linux/amd64
            target: x86_64-unknown-linux-musl
          - variant: musl
            arch: arm64
            platform: linux/arm64
            target: aarch64-unknown-linux-musl
          - variant: glibc
            arch: amd64
            platform: linux/amd64
            target: x86_64-unknown-linux-gnu
          - variant: glibc
            arch: arm64
            platform: linux/arm64
            target: aarch64-unknown-linux-gnu
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get version tag
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            VERSION="${GITHUB_REF#refs/tags/}"
          else
            VERSION="${{ github.event.workflow_run.head_branch }}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Extracting binaries for version: ${VERSION}"

      - name: Extract binary from Docker image
        run: |
          # Determine the correct image tag
          if [[ "${{ steps.version.outputs.version }}" == v* ]]; then
            # For version tags, use the version-variant format
            IMAGE="ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}-${{ matrix.variant }}"
          else
            # For non-version builds, use the variant-arch format
            IMAGE="ghcr.io/${{ github.repository }}:${{ matrix.variant }}-${{ matrix.arch }}"
          fi
          
          echo "Extracting binary from image: ${IMAGE}"
          
          # Create container and extract binary
          docker create --name extract --platform ${{ matrix.platform }} ${IMAGE}
          docker cp extract:/usr/local/bin/pano ./pano-${{ matrix.target }}
          docker rm extract
          
          # Make binary executable and create archive
          chmod +x ./pano-${{ matrix.target }}
          tar -czf pano-${{ matrix.target }}.tar.gz pano-${{ matrix.target }}
          
          # Generate SHA256 checksum
          sha256sum pano-${{ matrix.target }}.tar.gz > pano-${{ matrix.target }}.tar.gz.sha256

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: pano-${{ matrix.target }}
          path: |
            pano-${{ matrix.target }}
            pano-${{ matrix.target }}.tar.gz
            pano-${{ matrix.target }}.tar.gz.sha256
          retention-days: 1

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: extract-binaries
    if: ${{ (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) || (github.event.workflow_run.conclusion == 'success' && startsWith(github.event.workflow_run.head_branch, 'v')) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Get version tag
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            VERSION="${GITHUB_REF#refs/tags/}"
          else
            VERSION="${{ github.event.workflow_run.head_branch }}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Creating release for version: ${VERSION}"

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          
          # Move all binaries and archives to release directory
          for target in x86_64-unknown-linux-musl aarch64-unknown-linux-musl x86_64-unknown-linux-gnu aarch64-unknown-linux-gnu; do
            if [ -d "./artifacts/pano-${target}" ]; then
              cp ./artifacts/pano-${target}/* ./release-assets/
            fi
          done
          
          # Create a combined checksums file
          cd release-assets
          cat *.sha256 > checksums.txt
          
          # List all assets
          echo "Release assets:"
          ls -la

      - name: Generate release notes
        id: notes
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          cat << EOF > release-notes.md
          ## Pano ${VERSION}
          
          ### Available Binaries
          
          | Platform | Architecture | C Library | Download |
          |----------|--------------|-----------|----------|
          | Linux | x86_64 | musl | [pano-x86_64-unknown-linux-musl.tar.gz](https://github.com/${{ github.repository }}/releases/download/${VERSION}/pano-x86_64-unknown-linux-musl.tar.gz) |
          | Linux | aarch64 | musl | [pano-aarch64-unknown-linux-musl.tar.gz](https://github.com/${{ github.repository }}/releases/download/${VERSION}/pano-aarch64-unknown-linux-musl.tar.gz) |
          | Linux | x86_64 | glibc | [pano-x86_64-unknown-linux-gnu.tar.gz](https://github.com/${{ github.repository }}/releases/download/${VERSION}/pano-x86_64-unknown-linux-gnu.tar.gz) |
          | Linux | aarch64 | glibc | [pano-aarch64-unknown-linux-gnu.tar.gz](https://github.com/${{ github.repository }}/releases/download/${VERSION}/pano-aarch64-unknown-linux-gnu.tar.gz) |
          
          ### Docker Images
          
          Pull the Docker images from GitHub Container Registry:
          
          \`\`\`bash
          # musl-based images (smaller, statically linked)
          docker pull ghcr.io/${{ github.repository }}:${VERSION}-musl
          docker pull ghcr.io/${{ github.repository }}:musl-amd64
          docker pull ghcr.io/${{ github.repository }}:musl-arm64
          
          # glibc-based images (standard, dynamically linked)
          docker pull ghcr.io/${{ github.repository }}:${VERSION}-glibc
          docker pull ghcr.io/${{ github.repository }}:glibc-amd64
          docker pull ghcr.io/${{ github.repository }}:glibc-arm64
          
          # Latest (defaults to glibc-amd64)
          docker pull ghcr.io/${{ github.repository }}:latest
          \`\`\`
          
          ### Installation
          
          Download the appropriate binary for your system and architecture:
          
          \`\`\`bash
          # Example for x86_64 with glibc
          wget https://github.com/${{ github.repository }}/releases/download/${VERSION}/pano-x86_64-unknown-linux-gnu.tar.gz
          tar -xzf pano-x86_64-unknown-linux-gnu.tar.gz
          sudo mv pano-x86_64-unknown-linux-gnu /usr/local/bin/pano
          sudo chmod +x /usr/local/bin/pano
          \`\`\`
          
          ### Checksums
          
          Verify the integrity of downloaded files using the SHA256 checksums provided in \`checksums.txt\`.
          
          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Pano ${{ steps.version.outputs.version }}
          body_path: release-notes.md
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, '-') }}
          files: |
            release-assets/pano-x86_64-unknown-linux-musl
            release-assets/pano-x86_64-unknown-linux-musl.tar.gz
            release-assets/pano-x86_64-unknown-linux-musl.tar.gz.sha256
            release-assets/pano-aarch64-unknown-linux-musl
            release-assets/pano-aarch64-unknown-linux-musl.tar.gz
            release-assets/pano-aarch64-unknown-linux-musl.tar.gz.sha256
            release-assets/pano-x86_64-unknown-linux-gnu
            release-assets/pano-x86_64-unknown-linux-gnu.tar.gz
            release-assets/pano-x86_64-unknown-linux-gnu.tar.gz.sha256
            release-assets/pano-aarch64-unknown-linux-gnu
            release-assets/pano-aarch64-unknown-linux-gnu.tar.gz
            release-assets/pano-aarch64-unknown-linux-gnu.tar.gz.sha256
            release-assets/checksums.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Summary
        run: |
          echo "## Release Created Successfully! ðŸŽ‰" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Version: ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Released Binaries:" >> $GITHUB_STEP_SUMMARY
          echo "- pano-x86_64-unknown-linux-musl" >> $GITHUB_STEP_SUMMARY
          echo "- pano-aarch64-unknown-linux-musl" >> $GITHUB_STEP_SUMMARY
          echo "- pano-x86_64-unknown-linux-gnu" >> $GITHUB_STEP_SUMMARY
          echo "- pano-aarch64-unknown-linux-gnu" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Docker Images:" >> $GITHUB_STEP_SUMMARY
          echo "- ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}-musl" >> $GITHUB_STEP_SUMMARY
          echo "- ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}-glibc" >> $GITHUB_STEP_SUMMARY
          echo "- ghcr.io/${{ github.repository }}:musl-amd64" >> $GITHUB_STEP_SUMMARY
          echo "- ghcr.io/${{ github.repository }}:musl-arm64" >> $GITHUB_STEP_SUMMARY
          echo "- ghcr.io/${{ github.repository }}:glibc-amd64" >> $GITHUB_STEP_SUMMARY
          echo "- ghcr.io/${{ github.repository }}:glibc-arm64" >> $GITHUB_STEP_SUMMARY
